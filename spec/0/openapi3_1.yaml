openapi: 3.1.0
info:
  title: Schema API - OpenAPI 3.1
  description: |-
    This is a Schema extraction API based on the OpenAPI 3.1 specification.  You can find out more about
    Swagger at [https://swagger.io](https://swagger.io). 
  termsOfService: http://swagger.io/terms/
  contact:
    email: philipp.schmurr@kit.edu
  license:
    name: MIT
    identifier: MIT
  version: 0.4.0
externalDocs:
  description: Find out more about Swagger
  url: http://swagger.io
servers:
  - url: http://localhost:7373
tags:
  - name: schema
    description: Everything about your existing data's schema
    externalDocs:
      description: Find out more
      url: http://swagger.io
  - name: entity
    description: Access to information on the schema of individual entities
    externalDocs:
      description: Find out more about our store
      url: http://swagger.io
  - name: key
    description: Operations about keys
  - name: format
    description: A file format supported by the schema API
paths:
  /formats:
    get:
      tags:
        - format
      summary: Get all supported formats of this API
      description: desc
      operationId: getAllFormats
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Format'
            application/x-yaml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Format'
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Format'
                xml:
                  name: formats
  /schemata:
    get:
      tags:
        - schema
      summary: Get all available schemas from this API server
      description: desc
      operationId: getAllSchemas
      parameters:
        - $ref: '#/components/parameters/preventOptimization'
        - $ref: '#/components/parameters/preventAutomaticOptimization'
        - $ref: '#/components/parameters/generateInverseRelations'
        # - $ref: '#/components/parameters/EntityPrefix'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Schema'
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Schema'
                xml:
                  name: schemas
            application/x-yaml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Schema'
  /schemata/{schemaId}:
    get:
      tags:
        - schema
      summary: Get schema by ID
      description: desc
      operationId: getSchemaByID
      parameters:
        - $ref: '#/components/parameters/schemaId'
        - $ref: '#/components/parameters/preventOptimization'
        - $ref: '#/components/parameters/preventAutomaticOptimization'
        - $ref: '#/components/parameters/generateInverseRelations'
      #   - $ref: '#/components/parameters/EntityPrefix'
      responses:
        '200':
          description: 'successful operation'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Schema'
            application/x-yaml:
              schema:
                $ref: '#/components/schemas/Schema'
            application/xml:
              schema:
                $ref: '#/components/schemas/Schema'
        '404':
          description: 'not found'
  /schemata/{schemaId}/diagram:
    get:
      tags:
        - schema
      summary: Get a diagram for the schema
      description: desc
      operationId: getSchemaDiagram
      parameters:
        - $ref: '#/components/parameters/schemaId'
        - name: showAttributes
          in: query
          description: Toggle the rendering state of attributes
          schema:
            type: boolean
            default: true
        - name: selectedEntities
          in: query
          description: Specify a list of highlighted entities
          schema:
            type: array
            items:
              type: string
            default: []
        - name: renderDistance
          description: The distance to render when using highlighted entities
          in: query
          schema:
            type: integer
            default: 2
        - $ref: '#/components/parameters/preventOptimization'
        - $ref: '#/components/parameters/preventAutomaticOptimization'
        - $ref: '#/components/parameters/generateInverseRelations'

      responses:
        '200':
          description: successful operation
          content:
            image/svg+xml:
              schema:
                type: string
            text/plain:
              schema:
                type: string
        '404':
          description: schema not found
      
  /schemata/{schemaId}/entities:
    get:
      tags:
        - entity
      summary: Get all entities of a schema
      description: desc
      operationId: getEntitiesBySchema
      parameters:
        - $ref: '#/components/parameters/schemaId'
        # - $ref: '#/components/parameters/EntityPrefix'
        - $ref: '#/components/parameters/preventOptimization'
        - $ref: '#/components/parameters/preventAutomaticOptimization'
        - $ref: '#/components/parameters/generateInverseRelations'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: 'json-schema/Entity.json'
            application/xml:
              schema:
                type: array
                items:
                  $ref: 'json-schema/Entity.json'
                xml:
                  name: entities
            application/x-yaml:
              schema:
                type: array
                items:
                  $ref: 'json-schema/Entity.json'
  /schemata/{schemaId}/entities/{entityId}:
    get:
      tags:
        - entity
      summary: Get a specific entity
      description: desc
      operationId: getEntityById
      parameters:
        - $ref: '#/components/parameters/schemaId'
        - $ref: '#/components/parameters/entityId'
        - $ref: '#/components/parameters/preventOptimization'
        - $ref: '#/components/parameters/preventAutomaticOptimization'
        - $ref: '#/components/parameters/generateInverseRelations'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: 'json-schema/Entity.json'
            application/xml:
              schema:
                $ref: 'json-schema/Entity.json'
                xml:
                    name: entity
            application/x-yaml:
              schema:
                $ref: 'json-schema/Entity.json'
              
components:
  parameters:
    EntityPrefix:
      name: EntityPrefix
      in: query
      schema:
        type: string
        default: ''
      required: false
    preventOptimization:
      name: preventOptimization
      in: query
      schema:
        type: boolean
        default: false
      required: false
    preventAutomaticOptimization:
      name: preventAutomaticOptimization
      in: query
      schema:
        type: boolean
        default: false
      required: false
    generateInverseRelations:
      name: generateInverseRelations
      in: query
      description: Toggles whether to generate inverse relations for each existing relation that has no schema based inverse
      schema:
        type: boolean
        default: false
      required: false
    entityId:
      name: entityId
      in: path
      description: ID of entity to return
      required: true
      schema:
        type: string
    schemaId:
      name: schemaId
      in: path
      description: ID of schema to access
      required: true
      schema:
        type: string
  schemas:
    # Attribute:
    #   $ref: 'json-schema/Attribute.json'
    #   xml:
    #     name: attribute
    # AttributeModifier:
    #   $ref: 'json-schema/AttributeModifier.json'
    #   xml:
    #     name: attribute-modifier
    # Cardinality:
    #   $ref: 'json-schema/Cardinality.json'
    #   xml:
    #     name: cardinality
    # Entity:
    #   $ref: 'json-schema/Entity.json'
    #   xml:
    #     name: entity
    # EntityModifier:
    #   $ref: 'json-schema/EntityModifier.json'
    #   xml:
    #     name: entity-modifier
    # Modifier:
    #   $ref: 'json-schema/Modifier.json'
    #   xml:
    #     name: modifier
    # Relation:
    #   $ref: 'json-schema/Relation.json'
    #   xml:
    #     name: relation
    # RelationModifier:
    #   $ref: 'json-schema/RelationModifier.json'
    #   xml:
    #     name: relation-modifier
    
    

    EntityLink:
      type: string
      format: url
      examples:
        - http://localhost/entityXY
    Format:
      type: object
      properties:
        name:
          type: string
          examples:
            - XML
        inputs:
          type: array
          items:
            type: string
    Schema:
      type: object
      properties:
        id:
          type: string
          examples:
            - case300
        description:
          type: string
          examples:
            - File based datasource from XY
        implementation:
          type: string
        schemaFile:
          type: string
        sourceFile:
          type: string
        entities:
          type: array
          xml:
            name: entities
          items:
            $ref: '#/components/schemas/EntityLink'
      xml:
        name: schema
    

