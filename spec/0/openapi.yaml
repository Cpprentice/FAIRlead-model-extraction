openapi: 3.0.3
info:
  title: Schema API - OpenAPI 3.0
  description: |-
    This is a Schema extraction API based on the OpenAPI 3.0 specification.  You can find out more about
    Swagger at [https://swagger.io](https://swagger.io). 
  termsOfService: http://swagger.io/terms/
  contact:
    email: philipp.schmurr@kit.edu
  license:
    name: MIT
  version: 0.1.0
externalDocs:
  description: Find out more about Swagger
  url: http://swagger.io
servers:
  - url: http://localhost/api/v0
tags:
  - name: schema
    description: Everything about your existing data's schema
    externalDocs:
      description: Find out more
      url: http://swagger.io
  - name: entity
    description: Access to information on the schema of individual entities
    externalDocs:
      description: Find out more about our store
      url: http://swagger.io
  - name: key
    description: Operations about keys
  - name: format
    description: A file format supported by the schema API
paths:
  /formats:
    get:
      tags:
        - format
      summary: Get all supported formats of this API
      description: desc
      operationId: getAllFormats
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Format'
  /schemata:
    get:
      tags:
        - schema
      summary: Get all avialable schemas from this API server
      description: desc
      operationId: getAllSchemas
      parameters:
        - $ref: '#/components/parameters/EntityPrefix'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Schema'
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Schema'
                xml:
                  name: schemas
  /schemata/{schemaId}:
    get:
      tags:
        - schema
      summary: Get schema by ID
      description: desc
      operationId: getSchemaByID
      parameters:
        - name: schemaId
          in: path
          description: ID of schema to return
          required: true
          schema:
            type: string
        - $ref: '#/components/parameters/EntityPrefix'
      responses:
        '200':
          description: 'successful operation'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Schema'
        '404':
          description: 'not found'
  /schemata/{schemaId}/diagram:
    get:
      tags:
        - schema
      summary: Get a diagram for the schema
      description: desc
      operationId: getSchemaDiagram
      parameters:
        - name: schemaId
          in: path
          description: ID of schema to return
          required: true
          schema:
            type: string
        - name: showAttributes
          in: query
          description: Toggle the rendering state of attributes
          schema:
            type: boolean
            default: true
      responses:
        '200':
          description: successful operation
          content:
            image/svg+xml:
              schema:
                type: string
            text/plain:
              schema:
                type: string
        '404':
          description: schema not found
      
  /schemata/{schemaId}/entities:
    get:
      tags:
        - entity
      summary: Get all entities of a schema
      description: desc
      operationId: getEntitiesBySchema
      parameters:
        - name: schemaId
          in: path
          description: ID of schema to return
          required: true
          schema:
            type: string
        - $ref: '#/components/parameters/EntityPrefix'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Entity'
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Entity'
                xml:
                  name: entities
  /schemata/{schemaId}/entities/{entityId}:
    get:
      tags:
        - entity
      summary: Get a specific entity
      description: desc
      operationId: getEntityById
      parameters:
        - name: schemaId
          in: path
          description: ID of schema to return
          required: true
          schema:
            type: string
        - name: entityId
          in: path
          description: ID of entity to return
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Entity'
            application/xml:
              schema:
                $ref: '#/components/schemas/Entity'
components:
  parameters:
    EntityPrefix:
      name: EntityPrefix
      in: query
      schema:
        type: string
        default: ''
      required: false
  schemas:
    Attribute:
      type: object
      properties:
        name:
          type: string
          example: id
        type:
          type: string
          enum: [bool, float, int, string]
        isCollection:
          type: boolean
          default: false
        isKey:
          type: boolean
          default: false
        # entityLink:
        #   type: string
        #   format: url
        #   description: This may contain placeholders for the actual values
        # linkIdSourceSelector:
        #   type: string
        #   description: the selector to get the target id from
        #   default: .
        # linkIdSourceFields:
        #   type: array
        #   items:
        #     type: string
        #   description: the fields to be used on the selector 
      required:
        - name
        - type
        - isCollection
        - isKey
    Entity:
      type: object
      properties:
        url:
          type: string
          format: url
          example: http://localhost/schemata/xy/entities/zy
        name:
          type: string
          example: EntityXY
        type:
          type: string
          enum: [strong, weak]
        attributes:
          type: array
          items:
            $ref: '#/components/schemas/Attribute'
        key:
          nullable: true
          default: null
          allOf:
            - $ref: '#/components/schemas/Key'
          example:
            selectors: ['column']
        relatedEntities:
          type: array
          items:
            $ref: '#/components/schemas/EntityLink'
          # default: []
      xml:
        name: entity
      required:
        - url
        - name
        - type
        - attributes
        - key
        - relatedEntities
    EntityLink:
      type: object
      properties:
        name:
          type: string
          example: EntityXY
        relationName:
          type: string
          example: IsChild
        cardinalities:
          type: array
          items:
            type: string
          minItems: 2
          maxItems: 2
        link:
          type: string
          format: url
          example: http://localhost/entityXY
      xml:
        name: entity-link
    Format:
      type: object
      properties:
        name:
          type: string
          example: XML
        inputs:
          type: array
          items:
            type: string
    Key:
      type: object
      properties:
        selectors:
          type: array
          items:
            type: string
      xml:
        name: key
    Schema:
      type: object
      properties:
        id:
          type: string
          example: case300
        description:
          type: string
          example: File based datasource from XY
        implementation:
          type: string
        schemaFile:
          type: string
        sourceFile:
          type: string
        entities:
          type: array
          xml:
            name: entities
          items:
            $ref: '#/components/schemas/EntityLink'
      xml:
        name: schema
    

